<% include partials/header %>
<section class="pro-three">
  <% include partials/nav %>
  <div class="header-two juice-head">
    <div class="void v2">
      <h1>Juicy Juize Tacos</h1>
        <p>
          Juicy Juize Tacos is a catering service that primarily serves 
          Los Angeles and the San Fernando  Valley. To build an effective 
          web experience for customers and the business itself i have to 
          make sure setting appointments and placing orders is simple and 
          effective.
        </p>
        <div class="btn"><a href="https://juicyjuize.com">App Preview</a></div>
    </div> 
  </div>  
</section>
<section class="pro-info">
  <div class="pro-info-container">
    <div class="bio-square bs-2">
      <h2>A Food Ordering App<br>In React</h2>
      <p>
        Juicy JuizeTacos main focus was to have an Application that allows customers 
        to order food off a menu while also functioning as a website listing services 
        and products. React.js is perfect for this project because it makes the complex 
        nature of the app easeier to implement and ensures our app renders fast enough 
        to meet any kind of demand.
      </p>
    </div>
  </div>
  <div class="pro-info-container respo">    
    <div class="img-container" data-aos="fade-up">
      <img src="/img/juicyshot.png" alt="" height="600" width="285">

      <div class="bio-square bs-5" >
        <h2>A robust web app hosted on aws</h2>
        <p>
          One of the most important aspects of web development is having a robust web
          app that can scale to the demand of the network/users with no latency. 
          thankfully, cloud infrastructure like AWS Amplify is specifically built for this 
          scenario. AWS Amplify allows you to create full-stack apps, frontend UI and backends
          visually, with authentication, storage, data, and more.
        </p>
      </br>
        <p>
          With the emergence of mobile browsing making up more than 50% of all web browsing, I decided to take a mobile first approach instead of the common approach of initially designing for the desktop. The process was a little diffrent considering the compact nature of mobile design so lets see how it all went down.    
        </p>
      </div>
  </div>
  
  </div> 
  <div class=section-slider>
      <div class="info-container">
          <div class="bio-square bs-4" data-aos="fade-right">
            <h2>Benefits of using React</h2>
            <p>
                Because of the mobile first nature of the app, React.js is perfect 
                for this project Here I highlight a quick break down of the main 
                advantages of creting a web app with React.
            </p>
          </div>
      <div class="slider-info" data-aos="fade-up">
        <div class="slide-info currant">
          <div class="content-info">
            <div class="void v2 v22">
              <p>Benefit &#35; <span>01</span></p>
                <h1>Reusability</h1>
                <p>
                  A ReactJS web application is made up of multiple components, 
                  and each component has its own logic and controls. 
                  These components are responsible for outputting a small, 
                  reusable piece of HTML code which can be reused wherever 
                  you need them.
                </p>          
            </div>
            
          </div>
        </div>
        <div class="slide-info ">
          <div class="content-info">
            <div class="void v2 v22">
              <p>Benefit &#35; <span>02</span></p>
                <h1>Improved Performance</h1>
                <p>
                   ReactJS improves performance due to virtual DOM. 
                   The React Virtual DOM solves this and exists entirely in 
                   memory and is a representation of the web browser's DOM. 
                   instead of rewriting the entire DOM everytime a change is made,
                   the virtual DOM only updates the elements that are being changed.
                </p>          
            </div>
           
          </div>
        </div>
        <div class="slide-info">
          <div class="content-info">
            <div class="void v2 v22">
              <p>Benefit &#35; <span>03</span></p>
                <h1>SEO Friendly</h1>
                <p>
                  Traditional JavaScript frameworks have an issue in dealing with SEO. 
                  ReactJS overcomes this problem that helps developers to be easily navigated 
                  on various search engines. It is because React.js applications can run on the 
                  server, and the virtual DOM will be rendering and returning to the browser as 
                  a regular web page. 
                </p>          
            </div>
           
          </div>
        </div>
      </div>
      <div class="buttons">
        <div class="butt" id="prev">    
          <img src="/svg/ionicons-arrow-dropleft.svg" alt="left arrow" height="75" width="75">
        </div>
        <div class="butt" id="next">
            <img src="/svg/ionicons-arrow-dropright.svg" alt="right arrow" height="75" width="75">
        </div>
      </div>
      </div>
    </div>
  <div class="bio-square bs-4" data-aos="fade-left">
    <h2>Check Back for Updates!</h2>
    <p>
     This project is still a work in progress.
  </div>
</section>




<% include partials/contactpage %>
<% include partials/footer %>